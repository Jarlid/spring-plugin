// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HttpLexer.flex

package com.explyt.spring.web.language.http;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.explyt.spring.web.language.http.psi.HttpTypes.*;


public class _HttpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int REQUEST_NAME_STATE = 2;
  public static final int TAG_COMMENT_STATE = 4;
  public static final int REQUEST_TARGET_STATE = 6;
  public static final int HTTP_VERSION_STATE = 8;
  public static final int FIELD_NAME_STATE = 10;
  public static final int FIELD_VALUE_STATE = 12;
  public static final int MESSAGE_BODY_STATE = 14;
  public static final int FAKE_STATE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\6\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u2400\1\u2500\1\u2600\1\u2700\1\u2800\1\u1f00\31\u0100\1\u2900"+
    "\121\u0100\1\u2a00\4\u0100\1\u2b00\1\u0100\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\1\u3000\1\u3100\53\u0100\1\u3200\10\u3300\31\u1f00\1\u0100"+
    "\1\u3400\1\u3500\1\u0100\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u0100\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\1\u5200\1\u5300\1\u5400\1\u5500\1\u5600\1\u5700\3\u0100\1\u5800"+
    "\1\u5900\1\u5a00\12\u5300\4\u0100\1\u5b00\17\u5300\2\u0100\1\u5c00"+
    "\41\u5300\2\u0100\1\u5d00\1\u5e00\2\u5300\1\u5f00\1\u6000\27\u0100"+
    "\1\u6100\2\u0100\1\u6200\45\u5300\1\u0100\1\u6300\1\u6400\11\u5300"+
    "\1\u6500\23\u5300\1\u6600\1\u6700\1\u6800\1\u6900\1\u6a00\1\u6b00"+
    "\1\u6c00\1\u6d00\2\u1f00\1\u6e00\5\u5300\1\u6f00\1\u7000\1\u7100"+
    "\5\u5300\1\u7200\1\u7300\2\u5300\1\u7400\1\u7500\1\u7600\1\u5300"+
    "\1\u7700\1\u7800\1\u7900\3\u1f00\1\u7a00\1\u7b00\1\u7c00\1\u7d00"+
    "\1\u7e00\5\u5300\246\u0100\1\u7f00\20\u0100\1\u8000\1\u8100\25\u0100"+
    "\1\u8200\34\u0100\1\u8300\14\u5300\2\u0100\1\u8400\u0b05\u5300\1\u8500"+
    "\1\u8600\376\u5300\377\u1f00\1\u8700\377\u1f00\1\u8700";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\4\6\2\7\2\6\1\7\1\6\1\11"+
    "\1\12\12\13\1\14\5\7\1\15\7\6\1\16\7\6"+
    "\1\17\3\6\1\20\6\6\3\7\35\6\1\7\3\6"+
    "\1\0\5\7\1\21\44\7\1\6\12\7\1\6\4\7"+
    "\1\6\5\7\27\6\1\7\37\6\1\7\u01ca\6\4\7"+
    "\14\6\16\7\5\6\7\7\1\6\1\7\1\6\126\7"+
    "\1\6\52\7\5\6\1\7\2\6\2\0\4\6\1\7"+
    "\1\6\4\0\2\7\1\6\1\7\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\7\213\6\10\7\246\6"+
    "\1\0\46\6\2\0\1\6\6\7\51\6\2\7\2\0"+
    "\3\7\1\0\37\7\16\6\1\7\1\6\1\7\2\6"+
    "\1\7\2\6\1\7\1\6\10\0\33\6\4\0\4\6"+
    "\2\7\13\0\20\7\13\6\2\7\1\0\2\7\70\6"+
    "\1\7\21\6\4\7\146\6\1\7\10\6\4\7\10\6"+
    "\4\7\20\6\2\7\1\6\16\7\1\0\1\7\60\6"+
    "\13\7\2\0\145\6\16\0\53\6\11\7\2\6\4\7"+
    "\1\6\2\0\3\7\30\6\2\7\23\6\1\7\2\0"+
    "\17\7\1\0\31\6\3\7\2\0\1\7\1\0\13\6"+
    "\65\0\25\6\1\0\10\6\25\0\1\7\14\6\3\7"+
    "\7\6\6\7\114\6\1\7\20\6\1\7\3\6\4\7"+
    "\17\6\2\7\12\6\1\7\23\6\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\10\6\2\0\2\6\2\0\2\6"+
    "\1\7\1\6\10\0\1\6\4\0\2\6\1\0\5\6"+
    "\2\0\14\6\12\7\1\6\2\7\2\0\3\6\1\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0"+
    "\5\6\4\0\2\6\2\0\2\6\1\7\3\0\1\6"+
    "\7\0\4\6\1\0\1\6\7\0\20\6\1\7\12\0"+
    "\3\6\1\0\11\6\1\0\3\6\1\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\11\6"+
    "\1\0\3\6\1\0\2\6\1\7\2\0\1\6\17\0"+
    "\4\6\2\0\12\6\2\7\7\0\4\6\3\7\1\0"+
    "\3\6\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\10\6"+
    "\2\0\2\6\2\0\2\6\1\7\10\0\2\6\4\0"+
    "\2\6\1\0\5\6\2\0\12\6\1\7\1\6\6\7"+
    "\12\0\2\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\6\3\0\3\6"+
    "\1\0\3\6\1\7\2\0\1\6\6\0\1\6\16\0"+
    "\12\6\13\7\5\0\4\6\1\7\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\20\6\3\0\10\6\1\0\3\6"+
    "\1\0\3\6\1\7\7\0\2\6\1\0\3\6\5\0"+
    "\4\6\2\0\12\6\7\0\11\7\4\6\1\7\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\10\6\1\0\3\6\1\0\3\6\1\7"+
    "\7\0\2\6\7\0\1\6\1\0\4\6\2\0\12\6"+
    "\1\0\2\6\15\0\4\6\1\0\10\6\1\0\3\6"+
    "\1\0\51\6\2\7\10\6\1\0\3\6\1\0\3\6"+
    "\1\7\1\6\1\7\4\0\4\6\7\7\5\6\2\0"+
    "\12\6\12\7\6\6\2\0\2\6\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\7\4\0\6\6\1\0\1\6\1\0\10\6\6\0"+
    "\12\6\2\0\2\6\1\7\14\0\72\6\4\0\1\7"+
    "\7\6\6\7\1\6\2\7\12\6\2\7\45\0\2\6"+
    "\1\0\1\6\1\0\5\6\1\0\30\6\1\0\1\6"+
    "\1\0\23\6\1\7\3\6\2\0\5\6\1\0\1\6"+
    "\1\0\5\7\1\6\2\0\12\6\2\0\4\6\40\0"+
    "\1\6\37\7\12\6\26\7\10\6\1\0\44\6\4\0"+
    "\21\6\6\7\20\6\1\0\44\6\1\0\17\7\1\0"+
    "\15\7\45\0\67\6\1\7\1\6\2\7\17\6\6\7"+
    "\116\6\2\7\46\6\1\0\1\6\5\0\1\6\2\0"+
    "\53\6\1\7\115\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"+
    "\103\6\2\0\40\7\3\0\20\6\12\7\6\0\126\6"+
    "\2\0\6\6\2\0\1\7\u016c\6\2\7\21\6\1\0"+
    "\32\6\2\7\3\0\113\6\3\7\13\6\7\0\15\6"+
    "\1\0\6\6\1\7\13\0\24\6\3\7\11\0\24\6"+
    "\14\0\15\6\1\0\3\6\1\0\2\6\14\0\64\6"+
    "\2\7\23\6\16\7\1\6\4\7\1\6\1\7\2\0"+
    "\12\6\6\0\12\7\6\0\17\7\1\0\12\6\6\0"+
    "\131\6\7\0\53\6\5\0\106\6\12\0\37\6\1\0"+
    "\14\6\4\0\11\6\3\7\4\0\1\7\3\0\2\7"+
    "\50\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0"+
    "\12\6\1\7\3\0\42\7\34\6\2\0\2\7\77\6"+
    "\1\0\1\7\24\6\10\7\2\0\1\7\12\6\6\0"+
    "\12\6\6\0\7\7\1\6\6\7\2\0\17\7\101\0"+
    "\64\6\1\7\17\6\1\7\7\6\4\0\12\6\43\7"+
    "\3\0\52\6\2\7\72\6\1\7\13\6\2\7\10\0"+
    "\4\7\67\6\1\7\3\0\5\7\12\6\3\0\61\6"+
    "\2\7\11\6\7\0\53\6\2\0\3\6\10\7\10\0"+
    "\31\7\4\6\1\7\6\6\1\7\2\6\3\7\1\6"+
    "\5\0\300\6\47\7\16\6\5\7\1\0\5\7\26\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\7\1\6\3\7\3\6"+
    "\1\0\7\6\3\7\4\6\2\0\6\6\1\0\3\7"+
    "\15\6\3\7\2\0\3\6\1\0\7\6\2\7\14\0"+
    "\35\7\2\22\5\7\1\0\57\7\1\0\5\7\1\0"+
    "\13\7\1\6\2\0\13\7\1\6\17\7\1\0\15\6"+
    "\3\0\40\7\20\0\41\7\17\0\2\7\1\6\4\7"+
    "\1\6\2\7\12\6\1\7\1\6\3\7\5\6\6\7"+
    "\1\6\1\7\1\6\1\7\1\6\1\7\4\6\1\7"+
    "\13\6\2\7\4\6\5\7\5\6\4\7\1\6\21\7"+
    "\51\6\3\7\4\0\u0197\7\31\0\13\7\25\0\126\7"+
    "\64\6\212\7\2\0\40\7\2\0\150\7\57\6\1\0"+
    "\57\6\1\0\205\6\6\7\4\6\3\7\2\6\5\0"+
    "\7\7\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\1\7\16\0\1\7\27\6\11\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\6"+
    "\57\7\1\6\40\7\60\0\32\7\1\0\131\7\14\0"+
    "\326\7\32\0\14\7\5\0\4\7\3\6\31\7\11\6"+
    "\7\7\5\6\2\7\5\6\3\7\1\0\126\6\2\0"+
    "\4\7\3\6\1\7\132\6\1\7\4\6\5\0\53\6"+
    "\1\0\136\6\1\0\20\7\33\6\5\0\44\7\14\0"+
    "\20\6\37\7\1\0\340\7\266\6\12\0\100\7\360\6"+
    "\20\0\215\6\3\0\67\7\11\0\56\6\2\7\15\6"+
    "\3\7\34\6\24\0\57\6\5\7\10\6\3\7\161\6"+
    "\10\7\10\0\27\7\11\6\2\7\147\6\2\7\65\6"+
    "\2\0\5\6\60\0\17\6\1\7\41\6\4\7\4\0"+
    "\12\7\6\0\64\6\4\7\10\0\104\6\1\7\1\6"+
    "\10\0\2\7\12\6\6\0\22\7\6\6\3\7\1\6"+
    "\1\7\56\6\5\7\43\6\1\7\13\0\1\7\35\6"+
    "\3\0\63\6\1\7\14\6\16\7\1\0\13\6\4\0"+
    "\2\7\37\6\1\0\67\6\11\0\16\6\2\0\12\6"+
    "\2\0\4\7\27\6\3\7\105\6\1\7\1\6\1\7"+
    "\1\6\30\0\3\6\2\7\20\6\2\7\4\6\1\7"+
    "\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6"+
    "\1\0\7\6\1\0\53\6\1\7\14\6\10\0\173\6"+
    "\3\7\2\0\12\6\6\0\244\6\14\0\27\6\4\0"+
    "\61\6\4\0\u0100\22\156\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\14\6\1\7\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\20\7\21\0\153\6\2\7\20\0\100\6\2\0\66\6"+
    "\50\0\14\6\2\7\2\0\32\7\6\0\63\7\1\0"+
    "\23\7\1\0\4\7\4\0\5\6\1\0\207\6\2\0"+
    "\1\7\1\0\17\7\12\6\7\7\32\6\6\7\32\6"+
    "\13\7\131\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\7\7\1\0\7\7\12\0\5\7"+
    "\2\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6"+
    "\1\0\17\6\2\0\16\6\42\0\173\6\5\0\3\7"+
    "\4\0\55\7\3\0\11\7\65\6\32\7\1\0\14\7"+
    "\4\0\1\7\57\0\56\7\202\0\35\6\3\0\61\6"+
    "\17\0\34\7\4\0\40\6\4\7\11\0\36\6\5\0"+
    "\53\6\5\0\36\6\1\0\1\7\44\6\4\0\10\6"+
    "\1\7\5\6\52\0\236\6\2\0\12\6\6\0\44\6"+
    "\4\0\44\6\4\0\50\6\10\0\64\6\13\0\1\7"+
    "\220\0\67\6\11\0\26\6\12\0\10\6\230\0\6\6"+
    "\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6"+
    "\2\0\27\6\1\0\11\7\27\6\11\7\37\6\10\0"+
    "\11\7\60\0\23\6\1\0\2\6\5\0\5\7\26\6"+
    "\6\7\3\0\1\7\32\6\5\0\1\7\100\0\70\6"+
    "\4\0\2\7\2\6\20\7\2\0\56\7\4\6\1\0"+
    "\2\6\5\0\10\6\1\0\3\6\1\0\35\6\2\0"+
    "\3\7\4\0\12\7\7\0\11\7\7\0\35\6\3\7"+
    "\35\6\3\7\40\0\10\6\1\7\34\6\2\7\4\0"+
    "\14\7\11\0\66\6\3\0\7\7\26\6\2\0\10\7"+
    "\23\6\5\0\10\7\22\6\7\0\4\7\14\0\7\7"+
    "\120\0\111\6\67\0\63\6\15\0\63\6\7\0\6\7"+
    "\50\6\10\0\12\6\u0126\0\37\7\201\0\35\6\12\7"+
    "\1\6\10\0\26\6\24\7\206\0\27\6\11\0\106\6"+
    "\10\7\4\0\24\7\12\6\17\0\3\7\67\6\11\7"+
    "\13\0\1\7\2\0\31\6\7\0\12\6\6\0\63\6"+
    "\2\7\1\0\12\6\4\7\3\6\11\0\43\6\3\7"+
    "\1\6\11\0\100\6\1\7\4\6\11\7\2\0\13\6"+
    "\1\7\1\6\3\7\1\0\24\7\13\0\22\6\1\0"+
    "\42\6\2\7\1\6\6\7\1\6\101\0\7\6\1\0"+
    "\1\6\1\0\4\6\1\0\17\6\1\0\12\6\1\7"+
    "\6\0\71\6\2\7\5\0\12\6\6\0\4\6\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\1\0\2\7\10\6\2\0\2\6"+
    "\2\0\2\6\1\7\2\0\1\6\6\0\1\6\5\0"+
    "\7\6\2\0\7\7\3\0\5\7\213\0\102\6\1\7"+
    "\3\6\1\7\4\6\5\7\12\6\1\0\1\7\1\0"+
    "\2\7\1\6\40\0\102\6\2\7\2\6\1\7\1\6"+
    "\10\0\12\6\246\0\66\6\2\0\7\6\31\7\6\6"+
    "\42\0\77\6\1\7\1\6\3\7\1\6\13\0\12\6"+
    "\6\0\15\7\23\0\66\6\2\7\1\6\7\0\12\6"+
    "\66\0\33\6\2\0\16\6\1\7\4\0\12\6\6\7"+
    "\300\0\71\6\3\7\144\0\112\6\11\7\14\0\1\6"+
    "\240\0\10\6\2\0\56\6\2\0\6\6\1\7\1\6"+
    "\1\7\2\6\33\0\63\6\2\7\12\6\11\7\10\0"+
    "\110\6\5\7\1\6\5\7\35\0\71\6\u0107\0\11\6"+
    "\1\0\55\6\1\0\7\6\1\7\1\6\5\7\12\0"+
    "\12\6\23\7\3\0\2\7\36\6\2\0\26\6\1\0"+
    "\16\6\111\0\7\6\1\0\2\6\1\0\54\6\3\0"+
    "\1\6\1\0\2\6\1\0\3\6\1\7\1\6\2\7"+
    "\2\6\10\0\12\6\6\0\6\6\1\0\2\6\1\0"+
    "\45\6\1\0\2\6\1\0\4\6\1\7\1\6\7\0"+
    "\12\6\u0136\0\27\6\2\7\307\0\62\7\15\0\1\7"+
    "\232\6\146\0\157\6\1\0\5\7\13\0\304\6\274\0"+
    "\57\6\1\0\11\7\307\0\107\6\271\0\71\6\7\0"+
    "\37\6\1\0\12\6\4\0\2\7\140\0\36\6\2\0"+
    "\6\7\12\0\60\6\20\7\4\6\2\7\12\0\12\6"+
    "\1\0\7\7\1\0\25\6\5\0\23\6\260\0\100\6"+
    "\33\7\145\0\113\6\4\0\71\6\7\0\21\6\100\0"+
    "\2\6\1\7\1\6\34\0\370\6\10\0\363\6\15\0"+
    "\37\6\61\0\3\6\21\0\4\6\10\0\u018c\6\4\0"+
    "\153\6\5\0\15\6\3\0\11\6\7\0\12\6\2\0"+
    "\2\7\1\6\5\7\134\0\366\7\12\0\47\7\2\0"+
    "\300\7\27\0\106\7\232\0\24\7\14\0\127\7\11\0"+
    "\31\7\207\0\125\6\1\0\107\6\1\0\2\6\2\0"+
    "\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0"+
    "\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0"+
    "\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0"+
    "\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\7\31\6\1\7\37\6\1\7\31\6\1\7"+
    "\37\6\1\7\31\6\1\7\37\6\1\7\31\6\1\7"+
    "\37\6\1\7\31\6\1\7\10\6\2\0\62\6\214\7"+
    "\17\0\5\7\1\0\17\7\120\0\7\6\1\0\21\6"+
    "\2\0\7\6\1\0\2\6\1\0\5\6\325\0\55\6"+
    "\3\0\7\7\7\6\2\0\12\6\4\0\1\6\1\7"+
    "\u0170\0\54\6\4\7\12\6\5\0\1\7\305\6\2\0"+
    "\20\7\51\0\104\6\3\7\1\6\3\7\1\6\4\0"+
    "\12\6\4\0\2\7\u0111\0\104\7\114\0\75\7\302\0"+
    "\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0"+
    "\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0"+
    "\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0"+
    "\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0"+
    "\21\6\64\0\2\7\16\0\54\7\4\0\144\7\14\0"+
    "\17\7\2\0\17\7\1\0\17\7\1\0\45\7\12\0"+
    "\15\7\3\0\40\7\32\6\6\7\32\6\3\7\3\0"+
    "\32\6\43\7\71\0\35\7\15\0\54\7\4\0\11\7"+
    "\7\0\2\7\16\0\6\7\232\0\326\7\12\0\15\7"+
    "\3\0\13\7\5\0\164\7\14\0\131\7\7\0\14\7"+
    "\24\0\14\7\4\0\70\7\10\0\12\7\6\0\50\7"+
    "\10\0\36\7\122\0\14\7\1\0\145\7\1\0\4\7"+
    "\3\0\51\7\2\0\6\7\3\0\35\7\2\0\207\7"+
    "\14\0\16\7\2\0\4\7\4\0\3\7\5\0\3\7"+
    "\15\0\6\7\152\0\327\6\51\0\65\6\13\0\336\6"+
    "\2\0\u0182\6\16\0\u0131\6\37\0\36\6\343\0\1\7"+
    "\36\0\140\7\200\0\360\7\20\0\376\7\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[34816];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\2\0\1\3\1\4\1\0"+
    "\1\5\1\6\1\5\1\7\2\10\1\5\1\1\1\11"+
    "\1\5\1\12\1\13\1\5\1\14\1\2\1\15\1\5"+
    "\2\2\1\5\1\16\1\5\2\17\1\20\1\3\3\21"+
    "\1\4\1\13\1\4\1\13\1\0\2\10\1\13\1\0"+
    "\2\17\1\0\2\13\1\4\1\13\1\0\1\22\1\13"+
    "\2\0\1\23\1\13\2\0\1\24\3\0\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\23\0\46\0\71\0\114\0\137\0\162\0\205"+
    "\0\230\0\253\0\253\0\276\0\253\0\321\0\344\0\367"+
    "\0\u010a\0\253\0\u011d\0\u0130\0\u0143\0\u0156\0\u0169\0\u017c"+
    "\0\253\0\u018f\0\u01a2\0\u01b5\0\u01c8\0\253\0\u01db\0\u01ee"+
    "\0\u0201\0\253\0\u0214\0\u0227\0\u023a\0\u024d\0\u0260\0\u0273"+
    "\0\u0286\0\u0299\0\u02ac\0\u02bf\0\u02d2\0\u02e5\0\u02f8\0\u030b"+
    "\0\u031e\0\u0227\0\u023a\0\u0331\0\u0344\0\u0357\0\u0357\0\u036a"+
    "\0\u037d\0\u0390\0\u03a3\0\u0357\0\u03b6\0\u03b6\0\u03c9\0\u03b6"+
    "\0\u03dc\0\u03ef\0\u0402\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\12\1\13\1\12\1\14\1\15\1\16\1\12\1\17"+
    "\1\16\1\20\1\16\2\12\3\16\2\12\2\21\1\22"+
    "\1\12\1\23\14\21\3\12\1\24\1\22\1\24\1\23"+
    "\1\24\2\12\1\25\1\12\1\26\2\12\1\27\5\12"+
    "\1\30\1\12\1\31\1\12\1\32\1\15\2\30\1\33"+
    "\1\30\1\34\10\30\2\12\1\31\1\12\1\32\1\15"+
    "\2\12\1\25\1\12\1\26\3\12\1\35\6\12\1\36"+
    "\1\12\1\37\1\15\1\40\1\12\1\41\1\40\1\26"+
    "\1\40\1\42\1\12\3\40\3\12\1\43\1\31\1\12"+
    "\1\32\1\43\2\44\1\45\1\44\1\46\7\44\1\12"+
    "\10\47\1\50\1\47\1\51\10\47\2\12\1\13\1\12"+
    "\1\14\1\15\2\12\1\25\1\12\1\26\10\12\25\0"+
    "\1\13\26\0\1\16\1\0\2\16\1\0\1\16\2\0"+
    "\3\16\2\0\1\25\1\52\3\53\1\52\1\54\1\25"+
    "\1\55\1\54\1\25\1\54\2\25\3\54\14\0\1\56"+
    "\10\0\2\21\3\0\14\21\4\0\1\22\21\0\1\24"+
    "\1\0\1\24\1\0\1\24\15\0\2\25\3\0\14\25"+
    "\14\0\1\25\10\0\2\27\3\0\14\27\2\0\1\30"+
    "\5\0\15\30\2\0\1\31\20\0\1\33\1\25\3\0"+
    "\1\25\13\33\3\30\5\0\4\30\1\33\10\30\20\0"+
    "\1\57\4\0\1\36\26\0\1\40\1\0\2\40\1\0"+
    "\1\40\2\0\3\40\2\0\2\25\3\0\1\25\1\60"+
    "\1\25\1\61\1\60\1\25\1\60\2\25\3\60\3\0"+
    "\1\43\3\0\1\43\16\0\1\62\3\0\1\62\14\44"+
    "\1\0\1\25\1\63\3\0\1\63\13\45\1\44\2\0"+
    "\1\62\3\0\1\62\4\44\1\45\7\44\1\0\10\47"+
    "\1\0\12\47\2\25\3\0\3\25\1\64\10\25\2\0"+
    "\10\47\1\0\1\47\1\65\10\47\1\25\1\52\3\53"+
    "\1\52\7\25\1\66\3\25\3\0\5\53\7\0\1\67"+
    "\5\0\2\25\3\0\1\25\1\54\1\25\2\54\1\25"+
    "\1\54\2\25\3\54\2\0\2\25\3\0\1\25\1\54"+
    "\1\25\1\70\1\54\1\25\1\54\2\25\3\54\2\0"+
    "\1\25\1\71\3\72\1\71\13\25\22\0\1\73\2\0"+
    "\2\25\3\0\1\25\1\60\1\25\2\60\1\25\1\60"+
    "\2\25\3\60\2\0\2\25\3\0\1\25\1\60\1\25"+
    "\1\70\1\60\1\25\1\60\2\25\3\60\2\0\2\25"+
    "\3\0\3\25\1\70\10\25\2\0\2\65\3\47\3\65"+
    "\1\25\10\65\2\47\2\74\3\0\14\74\2\0\2\70"+
    "\3\0\14\70\2\0\1\25\1\71\3\72\1\71\7\25"+
    "\1\75\3\25\3\0\5\72\7\0\1\76\24\0\1\77"+
    "\3\0\2\100\3\0\14\100\14\0\1\101\23\0\1\102"+
    "\20\0\1\103\24\0\1\104\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1045];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\2\11"+
    "\1\1\1\11\4\1\1\11\6\1\1\11\4\1\1\11"+
    "\3\1\1\11\10\1\1\0\3\1\1\0\2\1\1\0"+
    "\4\1\1\0\2\1\2\0\2\1\2\0\1\1\3\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _HttpLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HttpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ANY_TOKEN;
            }
          // fall through
          case 22: break;
          case 2:
            { yybegin(HTTP_VERSION_STATE); return REQUEST_TARGET;
            }
          // fall through
          case 23: break;
          case 3:
            { return OWS;
            }
          // fall through
          case 24: break;
          case 4:
            { return REQUEST_BODY;
            }
          // fall through
          case 25: break;
          case 5:
            { return BAD_CHARACTER;
            }
          // fall through
          case 26: break;
          case 6:
            { return CRLF;
            }
          // fall through
          case 27: break;
          case 7:
            { return SP;
            }
          // fall through
          case 28: break;
          case 8:
            { yybegin(REQUEST_TARGET_STATE); return HTTP_TOKEN;
            }
          // fall through
          case 29: break;
          case 9:
            { yybegin(YYINITIAL); return CRLF;
            }
          // fall through
          case 30: break;
          case 10:
            { return WHITE_SPACE;
            }
          // fall through
          case 31: break;
          case 11:
            { return COMMENT_LINE;
            }
          // fall through
          case 32: break;
          case 12:
            { return TAG_TOKEN;
            }
          // fall through
          case 33: break;
          case 13:
            { yybegin(FIELD_NAME_STATE); return CRLF;
            }
          // fall through
          case 34: break;
          case 14:
            { yybegin(MESSAGE_BODY_STATE); return CRLF;
            }
          // fall through
          case 35: break;
          case 15:
            { return HTTP_TOKEN;
            }
          // fall through
          case 36: break;
          case 16:
            { yybegin(FIELD_VALUE_STATE); return COLON;
            }
          // fall through
          case 37: break;
          case 17:
            { return FIELD_CONTENT;
            }
          // fall through
          case 38: break;
          case 18:
            { yypushback(yylength() - 3); yybegin(REQUEST_NAME_STATE); return REQUEST_SEPARATOR;
            }
          // fall through
          case 39: break;
          case 19:
            { yypushback(yylength() - 1); yybegin(TAG_COMMENT_STATE); return COMMENT_SEPARATOR;
            }
          // fall through
          case 40: break;
          case 20:
            { yypushback(yylength() - 2); yybegin(TAG_COMMENT_STATE); return COMMENT_SEPARATOR;
            }
          // fall through
          case 41: break;
          case 21:
            { return HTTP_VERSION;
            }
          // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
