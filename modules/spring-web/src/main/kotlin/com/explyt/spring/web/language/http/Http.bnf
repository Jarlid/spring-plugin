/*
 * Copyright Â© 2024 Explyt Ltd
 *
 * All rights reserved.
 *
 * This code and software are the property of Explyt Ltd and are protected by copyright and other intellectual property laws.
 *
 * You may use this code under the terms of the Explyt Source License Version 1.0 ("License"), if you accept its terms and conditions.
 *
 * By installing, downloading, accessing, using, or distributing this code, you agree to the terms and conditions of the License.
 * If you do not agree to such terms and conditions, you must cease using this code and immediately delete all copies of it.
 *
 * You may obtain a copy of the License at: https://github.com/explyt/spring-plugin/blob/main/EXPLYT-SOURCE-LICENSE.md
 *
 * Unauthorized use of this code constitutes a violation of intellectual property rights and may result in legal action.
 */

{
    parserClass="com.explyt.spring.web.language.http.parser.HttpParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Http"
    psiImplClassSuffix="Impl"
    psiPackage="com.explyt.spring.web.language.http.psi"
    psiPackage="com.explyt.spring.web.language.http.psi.impl"

    elementTypeHolderClass="com.explyt.spring.web.language.http.psi.HttpTypes"
    elementTypeClass="com.explyt.spring.web.language.http.psi.HttpElementType"
    tokenTypeClass="com.explyt.spring.web.language.http.psi.HttpTokenType"

    tokens = [
        CRLF="regexp:\r?\n"
        SP=" "
        // HTAB="regexp:\t"
        OWS="regexp:[ \t]*" // Optional White Space

        REQUEST_SEPARATOR = '###'
        BODY_REQUEST_SEPARATOR='regexp:###.*'

        COMMENT_SEPARATOR = 'regexp://|#'
        COMMENT_LINE = 'regexp:(//|#).*'
        TAG_COMMENT_LINE_1 = 'regexp:#\s+@.+'
        TAG_COMMENT_LINE_2 = 'regexp://\s+@.+'

        ANY_TOKEN="regexp:.*"
        TAG_TOKEN="regexp:@.*"

        REQUEST_TARGET="regexp:\S*"
        HTTP_VERSION="regexp:HTTP/\d\.\d"// HTTP-name "/" DIGIT "." DIGIT
        // HTTP-name = %s"HTTP"

        // LBRACES = '{{'
        // RBRACES = '}}'
        // IDENTIFIER = "regexp:\$?\p{Alnum}+"

        HTTP_TOKEN="regexp:[!#$%&'*+\-.^_`|~\p{Alnum}}]+" // 1*tchar
        // tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*"
        //       / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
        //       / DIGIT / ALPHA

        COLON=":"
        FIELD_CONTENT="regexp:[\p{Graph}\x80-\xff]([ \t]*[\p{Graph}\x80-\xff])*"
        // field-content = field-vchar
        //                 [ 1*( SP / HTAB / field-vchar ) field-vchar ]
        // field-vchar = VCHAR / obs-text
        // obs-text = %x80-FF
        //
        // Reformed variant:
        // FV_CHAR ( ( SP | HTAB )* FV_CHAR )*

        REQUEST_BODY="regexp:[^#]*"
    ]
    consumeTokenMethod = "consumeTokenFast"
}

////////////////////////////////////////////////////// FILE BASE ///////////////////////////////////////////////////////

http_file ::= requests

requests ::= any_request_block

any_request_block ::= ( request_block | dummy_request_block )*
{ pin=1; recoverWhile=recover_request }

request_block ::= CRLF* request_definer? CRLF*
                  ( comment CRLF* )*
                  request CRLF*
{ pin=5 }

dummy_request_block ::= CRLF* request_definer? CRLF*
                        ( comment CRLF* )*
{ pin=2; recoverWhile=recover_request }

///////////////////////////////////////////////// PRE-REQUEST COMMENTS /////////////////////////////////////////////////

request_definer ::= REQUEST_SEPARATOR [ ANY_TOKEN ]
comment ::= COMMENT_LINE | tag_comment_line
tag_comment_line ::= COMMENT_SEPARATOR [ WHITE_SPACE ] TAG_TOKEN

////////////////////////////////////////////////// REQUEST STRUCTURE ///////////////////////////////////////////////////

request ::= request_line [ CRLF
            ( field_line [ CRLF ] )*
            [ CRLF REQUEST_BODY ] ]
{ pin=1; recoverWhile=recover_request }

///////////////////////////////////////////////////// REQUEST LINE /////////////////////////////////////////////////////

request_line ::= method SP REQUEST_TARGET [ SP HTTP_VERSION ]
{ pin=1; recoverWhile=recover_line }

method ::= HTTP_TOKEN

// TODO: variable ::= LBRACES IDENTIFIER RBRACES {pin=1}

////////////////////////////////////////////////////// FIELD LINE //////////////////////////////////////////////////////

field_line ::= field_name ":" [OWS] field_value [OWS]
{ pin=2; recoverWhile=recover_line }

field_name ::= HTTP_TOKEN
field_value ::= FIELD_CONTENT

////////////////////////////////////////////////////// RECOVERIES //////////////////////////////////////////////////////

private recover_request ::= !(REQUEST_SEPARATOR)
private recover_line ::= !(CRLF)